import * as path from "@std/path";

const OUTPUT_PATH = path.resolve("lib", "all_values.ts");

const props = [
  ["exchCode", "All possible EXCHANGE CODE values."],
  ["micCode", "All possible MIC CODE values."],
  ["currency", "All possible CURRENCY values."],
  ["marketSecDes", "All possible MARKET SECURITY DESCRIPTOR values."],
  ["securityType", "All possible SECURITY TYPE values."],
  ["securityType2", "All possible ALTERNATE SECURITY TYPE values."],
  ["stateCode", "All possible STATE CODE values"],
];

console.log("Fetching mapping values: " + props.map((x) => x[0]).join(", "));
const mapped = await Promise.all(
  props.map(async ([prop, desc]) => {
    const response = await fetch(
      "https://api.openfigi.com/v3/mapping/values/" + prop,
    );
    if (!response.ok) {
      throw new Error(
        `Error fetching mapping values: HTTP ${response.status}: ${response.statusText}; ${await response
          .text()}`,
      );
    }
    const data = await response.json();
    return { prop, desc, values: data.values };
  }),
);

let out = `
/**
 * This file is auto-generated by \`scripts/retrieve.ts\`
 * Do not edit it manually.
 */
`;

for (const { prop, desc, values } of mapped) {
  out += `
/**
 * ${desc}
 * @see {@link https://api.openfigi.com/v3/mapping/values/${prop} | List of \`${prop}\` values}
 */
export const ${prop}Values = ${JSON.stringify(values, null, 2)} as const;

/**
 * ${desc}
 * @see {@link https://api.openfigi.com/v3/mapping/values/${prop} | List of \`${prop}\` values}
 */
export type ${
    prop[0].toUpperCase() + prop.slice(1)
  }Value = typeof ${prop}Values[number];
`;
}

await Deno.writeTextFile(OUTPUT_PATH, out);
console.log("Wrote " + OUTPUT_PATH);
